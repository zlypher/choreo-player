!function(){"use strict";window.AudioContext=window.AudioContext||window.webkitAudioContext,(()=>{const e=new AudioContext,t={fileLoaded:!1,buffer:null,source:null,startTime:0,position:0,isPlaying:!1},n="_choreo_checkpoints_",o=document.querySelector(".message-box"),i=document.querySelector(".fileSelect"),s=document.querySelector(".song"),r=document.querySelector(".song__name"),a={playEl:document.querySelector(".controls__play"),stopEl:document.querySelector(".controls__stop"),addEl:document.querySelector(".controls__add"),timeCurrentEl:document.querySelector(".controls__time-current"),timeTotalEl:document.querySelector(".controls__time-total"),indicatorContainerEl:document.querySelector(".controls__indicator-container"),indicatorBarEl:document.querySelector(".controls__indicator-bar")},l=document.querySelector(".checkpoints__list"),c=document.querySelector(".titles__list"),d=e=>{const t=e.target.files[0];t&&(S(`Loading file "${t.name}"...`),u(t).then(p).then(e=>{f({filename:t.name,buffer:e}),L()}).catch(e=>{S("Could not load audio file! Please select a different file.","error"),console.error(e)}))},u=e=>new Promise((t,n)=>{try{const o=new FileReader;o.onload=(()=>{t(o.result)}),o.readAsArrayBuffer(e)}catch(e){n(e)}}),m=t=>{let n=e.createBufferSource();return n.buffer=t,n.connect(e.destination),n},p=t=>e.decodeAudioData(t),f=({filename:e,buffer:n})=>{t.fileLoaded=!0,t.buffer=n,h(e,n),s.classList.add("song--selected"),r.innerHTML=e,a.timeTotalEl.innerHTML=_(t.buffer.duration)},_=e=>{const t=parseInt(e/60,10),n=parseInt(e-60*t,10);return`${t.toString().padStart(2,"0")}:${n.toString().padStart(2,"0")}`},g=()=>t.isPlaying?e.currentTime-t.startTime:t.position,y=()=>{const e=g(),n=Math.min(e/t.buffer.duration,1);a.indicatorBarEl.style.transform=`scaleX(${n})`,a.timeCurrentEl.innerHTML=_(e),t.position=e,1===n&&E(),t.isPlaying&&requestAnimationFrame(y)},L=()=>{o.innerHTML="",o.classList.remove("message-box--error"),o.classList.remove("message-box--info"),o.classList.add("message-box--hidden")},S=(e,t="info")=>{L(),o.innerHTML=e,o.classList.remove("message-box--hidden"),o.classList.add(`message-box--${t}`)},E=()=>{t.isPlaying=!1,t.position=0,t.source&&(t.source.stop(),t.source=null),a.playEl.classList.remove("controls__play--playing")},b=!0,h=(e,t)=>{b&&console.log(e,t)},T=()=>[],q=e=>{c.innerHTML=e.map(k).join("")},k=e=>`\n        <li class="titles__item">\n            <span class="titles__link">${e}</span>\n            <span>x</span>\n        </li>\n    `,x=()=>b&&JSON.parse(localStorage.getItem(n))||[],P=e=>{l.innerHTML=e.map(w).join("")},w=e=>`\n        <li class="checkpoints__item">\n            <span class="checkpoints__link">${e}</span>\n            <span class="checkpoints__action">P</span>\n            <span class="checkpoints__action">X</span>\n        </li>\n    `,C=()=>{t.fileLoaded&&(t.isPlaying=!t.isPlaying,a.playEl.classList.toggle("controls__play--playing",t.isPlaying),t.isPlaying?(t.position=t.position||0,t.startTime=e.currentTime-t.position,t.source=m(t.buffer),t.source.start(e.currentTime,t.position),y()):(t.source.stop(),t.source=null))},M=()=>E(),v=()=>{const e=g(),o=Math.min(e/t.buffer.duration,1);(e=>{const t=[...x(),e];localStorage.setItem(n,JSON.stringify(t))})({label:_(e),progress:o})},A=n=>{if(!t.fileLoaded)return;const o=a.indicatorContainerEl.getBoundingClientRect(),i=o.width,s=n.clientX-o.x;(n=>{const o=n*t.buffer.duration;t.isPlaying?(t.source.stop(),t.position=o,t.startTime=e.currentTime-t.position,t.source=m(t.buffer),t.source.start(e.currentTime,t.position)):t.position=o,y()})(Math.max(0,Math.min(i,s))/i)};(()=>{if(a.playEl.addEventListener("click",C,!1),a.stopEl.addEventListener("click",M,!1),a.addEl.addEventListener("click",v,!1),a.indicatorContainerEl.addEventListener("click",A,!1),i.addEventListener("change",d,!1),b){const e=T();q(e);const t=x();P(t)}})()})()}();
